<?php
/**
 * PersonCurriculumItem
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FenixEdu Public API
 *
 * OpenAPI specification derived from the provided FenixEdu API documentation.  **Scope & availability** - Applicable to all FenixEdu installations as of **v1.2.0**. - Availability and access control may vary per institution. Check your local instance.  **Localization** - All endpoints accept an optional `lang` query parameter. If present and supported,   responses are localized; otherwise, the default language is used. - Available languages are returned by `GET /about`.  **Security** - The original text does not describe authentication details. This spec marks endpoints under `/person` as **private** and attaches a generic Bearer token scheme. Replace or extend the security scheme to match your deployment (e.g., OAuth2 Authorization Code).
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PersonCurriculumItem Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PersonCurriculumItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PersonCurriculumItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'degree' => '\OpenAPI\Client\Model\DegreeRef',
        'start' => 'string',
        'end' => 'string',
        'credits' => 'float',
        'average' => 'float',
        'calculated_average' => 'float',
        'is_finished' => 'bool',
        'number_of_approved_courses' => 'int',
        'current_year' => 'int',
        'approved_courses' => '\OpenAPI\Client\Model\CurriculumApprovedCourse[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'degree' => null,
        'start' => null,
        'end' => null,
        'credits' => null,
        'average' => null,
        'calculated_average' => null,
        'is_finished' => null,
        'number_of_approved_courses' => null,
        'current_year' => null,
        'approved_courses' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'degree' => false,
        'start' => false,
        'end' => false,
        'credits' => false,
        'average' => false,
        'calculated_average' => false,
        'is_finished' => false,
        'number_of_approved_courses' => false,
        'current_year' => false,
        'approved_courses' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'degree' => 'degree',
        'start' => 'start',
        'end' => 'end',
        'credits' => 'credits',
        'average' => 'average',
        'calculated_average' => 'calculatedAverage',
        'is_finished' => 'isFinished',
        'number_of_approved_courses' => 'numberOfApprovedCourses',
        'current_year' => 'currentYear',
        'approved_courses' => 'approvedCourses'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'degree' => 'setDegree',
        'start' => 'setStart',
        'end' => 'setEnd',
        'credits' => 'setCredits',
        'average' => 'setAverage',
        'calculated_average' => 'setCalculatedAverage',
        'is_finished' => 'setIsFinished',
        'number_of_approved_courses' => 'setNumberOfApprovedCourses',
        'current_year' => 'setCurrentYear',
        'approved_courses' => 'setApprovedCourses'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'degree' => 'getDegree',
        'start' => 'getStart',
        'end' => 'getEnd',
        'credits' => 'getCredits',
        'average' => 'getAverage',
        'calculated_average' => 'getCalculatedAverage',
        'is_finished' => 'getIsFinished',
        'number_of_approved_courses' => 'getNumberOfApprovedCourses',
        'current_year' => 'getCurrentYear',
        'approved_courses' => 'getApprovedCourses'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('degree', $data ?? [], null);
        $this->setIfExists('start', $data ?? [], null);
        $this->setIfExists('end', $data ?? [], null);
        $this->setIfExists('credits', $data ?? [], null);
        $this->setIfExists('average', $data ?? [], null);
        $this->setIfExists('calculated_average', $data ?? [], null);
        $this->setIfExists('is_finished', $data ?? [], null);
        $this->setIfExists('number_of_approved_courses', $data ?? [], null);
        $this->setIfExists('current_year', $data ?? [], null);
        $this->setIfExists('approved_courses', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets degree
     *
     * @return \OpenAPI\Client\Model\DegreeRef|null
     */
    public function getDegree()
    {
        return $this->container['degree'];
    }

    /**
     * Sets degree
     *
     * @param \OpenAPI\Client\Model\DegreeRef|null $degree degree
     *
     * @return self
     */
    public function setDegree($degree)
    {
        if (is_null($degree)) {
            throw new \InvalidArgumentException('non-nullable degree cannot be null');
        }
        $this->container['degree'] = $degree;

        return $this;
    }

    /**
     * Gets start
     *
     * @return string|null
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param string|null $start start
     *
     * @return self
     */
    public function setStart($start)
    {
        if (is_null($start)) {
            throw new \InvalidArgumentException('non-nullable start cannot be null');
        }
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets end
     *
     * @return string|null
     */
    public function getEnd()
    {
        return $this->container['end'];
    }

    /**
     * Sets end
     *
     * @param string|null $end end
     *
     * @return self
     */
    public function setEnd($end)
    {
        if (is_null($end)) {
            throw new \InvalidArgumentException('non-nullable end cannot be null');
        }
        $this->container['end'] = $end;

        return $this;
    }

    /**
     * Gets credits
     *
     * @return float|null
     */
    public function getCredits()
    {
        return $this->container['credits'];
    }

    /**
     * Sets credits
     *
     * @param float|null $credits credits
     *
     * @return self
     */
    public function setCredits($credits)
    {
        if (is_null($credits)) {
            throw new \InvalidArgumentException('non-nullable credits cannot be null');
        }
        $this->container['credits'] = $credits;

        return $this;
    }

    /**
     * Gets average
     *
     * @return float|null
     */
    public function getAverage()
    {
        return $this->container['average'];
    }

    /**
     * Sets average
     *
     * @param float|null $average average
     *
     * @return self
     */
    public function setAverage($average)
    {
        if (is_null($average)) {
            throw new \InvalidArgumentException('non-nullable average cannot be null');
        }
        $this->container['average'] = $average;

        return $this;
    }

    /**
     * Gets calculated_average
     *
     * @return float|null
     */
    public function getCalculatedAverage()
    {
        return $this->container['calculated_average'];
    }

    /**
     * Sets calculated_average
     *
     * @param float|null $calculated_average calculated_average
     *
     * @return self
     */
    public function setCalculatedAverage($calculated_average)
    {
        if (is_null($calculated_average)) {
            throw new \InvalidArgumentException('non-nullable calculated_average cannot be null');
        }
        $this->container['calculated_average'] = $calculated_average;

        return $this;
    }

    /**
     * Gets is_finished
     *
     * @return bool|null
     */
    public function getIsFinished()
    {
        return $this->container['is_finished'];
    }

    /**
     * Sets is_finished
     *
     * @param bool|null $is_finished is_finished
     *
     * @return self
     */
    public function setIsFinished($is_finished)
    {
        if (is_null($is_finished)) {
            throw new \InvalidArgumentException('non-nullable is_finished cannot be null');
        }
        $this->container['is_finished'] = $is_finished;

        return $this;
    }

    /**
     * Gets number_of_approved_courses
     *
     * @return int|null
     */
    public function getNumberOfApprovedCourses()
    {
        return $this->container['number_of_approved_courses'];
    }

    /**
     * Sets number_of_approved_courses
     *
     * @param int|null $number_of_approved_courses number_of_approved_courses
     *
     * @return self
     */
    public function setNumberOfApprovedCourses($number_of_approved_courses)
    {
        if (is_null($number_of_approved_courses)) {
            throw new \InvalidArgumentException('non-nullable number_of_approved_courses cannot be null');
        }
        $this->container['number_of_approved_courses'] = $number_of_approved_courses;

        return $this;
    }

    /**
     * Gets current_year
     *
     * @return int|null
     */
    public function getCurrentYear()
    {
        return $this->container['current_year'];
    }

    /**
     * Sets current_year
     *
     * @param int|null $current_year current_year
     *
     * @return self
     */
    public function setCurrentYear($current_year)
    {
        if (is_null($current_year)) {
            throw new \InvalidArgumentException('non-nullable current_year cannot be null');
        }
        $this->container['current_year'] = $current_year;

        return $this;
    }

    /**
     * Gets approved_courses
     *
     * @return \OpenAPI\Client\Model\CurriculumApprovedCourse[]|null
     */
    public function getApprovedCourses()
    {
        return $this->container['approved_courses'];
    }

    /**
     * Sets approved_courses
     *
     * @param \OpenAPI\Client\Model\CurriculumApprovedCourse[]|null $approved_courses approved_courses
     *
     * @return self
     */
    public function setApprovedCourses($approved_courses)
    {
        if (is_null($approved_courses)) {
            throw new \InvalidArgumentException('non-nullable approved_courses cannot be null');
        }
        $this->container['approved_courses'] = $approved_courses;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


