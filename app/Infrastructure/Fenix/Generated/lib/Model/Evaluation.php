<?php
/**
 * Evaluation
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FenixEdu Public API
 *
 * OpenAPI specification derived from the provided FenixEdu API documentation.  **Scope & availability** - Applicable to all FenixEdu installations as of **v1.2.0**. - Availability and access control may vary per institution. Check your local instance.  **Localization** - All endpoints accept an optional `lang` query parameter. If present and supported,   responses are localized; otherwise, the default language is used. - Available languages are returned by `GET /about`.  **Security** - The original text does not describe authentication details. This spec marks endpoints under `/person` as **private** and attaches a generic Bearer token scheme. Replace or extend the security scheme to match your deployment (e.g., OAuth2 Authorization Code).
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Evaluation Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Evaluation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Evaluation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'type' => 'string',
        'name' => 'string',
        'evaluation_period' => '\OpenAPI\Client\Model\DateRange',
        'enrollment_period' => '\OpenAPI\Client\Model\DateRange',
        'is_in_enrolment_period' => 'bool',
        'is_enrolled' => 'bool',
        'rooms' => '\OpenAPI\Client\Model\RoomRef[]',
        'assigned_room' => '\OpenAPI\Client\Model\RoomRef',
        'courses' => '\OpenAPI\Client\Model\EvaluationCoursesInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'type' => null,
        'name' => null,
        'evaluation_period' => null,
        'enrollment_period' => null,
        'is_in_enrolment_period' => null,
        'is_enrolled' => null,
        'rooms' => null,
        'assigned_room' => null,
        'courses' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'type' => false,
        'name' => false,
        'evaluation_period' => false,
        'enrollment_period' => false,
        'is_in_enrolment_period' => false,
        'is_enrolled' => false,
        'rooms' => false,
        'assigned_room' => false,
        'courses' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'name' => 'name',
        'evaluation_period' => 'evaluationPeriod',
        'enrollment_period' => 'enrollmentPeriod',
        'is_in_enrolment_period' => 'isInEnrolmentPeriod',
        'is_enrolled' => 'isEnrolled',
        'rooms' => 'rooms',
        'assigned_room' => 'assignedRoom',
        'courses' => 'courses'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'name' => 'setName',
        'evaluation_period' => 'setEvaluationPeriod',
        'enrollment_period' => 'setEnrollmentPeriod',
        'is_in_enrolment_period' => 'setIsInEnrolmentPeriod',
        'is_enrolled' => 'setIsEnrolled',
        'rooms' => 'setRooms',
        'assigned_room' => 'setAssignedRoom',
        'courses' => 'setCourses'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'name' => 'getName',
        'evaluation_period' => 'getEvaluationPeriod',
        'enrollment_period' => 'getEnrollmentPeriod',
        'is_in_enrolment_period' => 'getIsInEnrolmentPeriod',
        'is_enrolled' => 'getIsEnrolled',
        'rooms' => 'getRooms',
        'assigned_room' => 'getAssignedRoom',
        'courses' => 'getCourses'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_TEST = 'TEST';
    public const TYPE_EXAM = 'EXAM';
    public const TYPE_PROJECT = 'PROJECT';
    public const TYPE_ONLINE_TEST = 'ONLINE_TEST';
    public const TYPE_AD_HOC = 'AD_HOC';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_TEST,
            self::TYPE_EXAM,
            self::TYPE_PROJECT,
            self::TYPE_ONLINE_TEST,
            self::TYPE_AD_HOC,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('evaluation_period', $data ?? [], null);
        $this->setIfExists('enrollment_period', $data ?? [], null);
        $this->setIfExists('is_in_enrolment_period', $data ?? [], null);
        $this->setIfExists('is_enrolled', $data ?? [], null);
        $this->setIfExists('rooms', $data ?? [], null);
        $this->setIfExists('assigned_room', $data ?? [], null);
        $this->setIfExists('courses', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets evaluation_period
     *
     * @return \OpenAPI\Client\Model\DateRange|null
     */
    public function getEvaluationPeriod()
    {
        return $this->container['evaluation_period'];
    }

    /**
     * Sets evaluation_period
     *
     * @param \OpenAPI\Client\Model\DateRange|null $evaluation_period evaluation_period
     *
     * @return self
     */
    public function setEvaluationPeriod($evaluation_period)
    {
        if (is_null($evaluation_period)) {
            throw new \InvalidArgumentException('non-nullable evaluation_period cannot be null');
        }
        $this->container['evaluation_period'] = $evaluation_period;

        return $this;
    }

    /**
     * Gets enrollment_period
     *
     * @return \OpenAPI\Client\Model\DateRange|null
     */
    public function getEnrollmentPeriod()
    {
        return $this->container['enrollment_period'];
    }

    /**
     * Sets enrollment_period
     *
     * @param \OpenAPI\Client\Model\DateRange|null $enrollment_period enrollment_period
     *
     * @return self
     */
    public function setEnrollmentPeriod($enrollment_period)
    {
        if (is_null($enrollment_period)) {
            throw new \InvalidArgumentException('non-nullable enrollment_period cannot be null');
        }
        $this->container['enrollment_period'] = $enrollment_period;

        return $this;
    }

    /**
     * Gets is_in_enrolment_period
     *
     * @return bool|null
     */
    public function getIsInEnrolmentPeriod()
    {
        return $this->container['is_in_enrolment_period'];
    }

    /**
     * Sets is_in_enrolment_period
     *
     * @param bool|null $is_in_enrolment_period is_in_enrolment_period
     *
     * @return self
     */
    public function setIsInEnrolmentPeriod($is_in_enrolment_period)
    {
        if (is_null($is_in_enrolment_period)) {
            throw new \InvalidArgumentException('non-nullable is_in_enrolment_period cannot be null');
        }
        $this->container['is_in_enrolment_period'] = $is_in_enrolment_period;

        return $this;
    }

    /**
     * Gets is_enrolled
     *
     * @return bool|null
     */
    public function getIsEnrolled()
    {
        return $this->container['is_enrolled'];
    }

    /**
     * Sets is_enrolled
     *
     * @param bool|null $is_enrolled is_enrolled
     *
     * @return self
     */
    public function setIsEnrolled($is_enrolled)
    {
        if (is_null($is_enrolled)) {
            throw new \InvalidArgumentException('non-nullable is_enrolled cannot be null');
        }
        $this->container['is_enrolled'] = $is_enrolled;

        return $this;
    }

    /**
     * Gets rooms
     *
     * @return \OpenAPI\Client\Model\RoomRef[]|null
     */
    public function getRooms()
    {
        return $this->container['rooms'];
    }

    /**
     * Sets rooms
     *
     * @param \OpenAPI\Client\Model\RoomRef[]|null $rooms rooms
     *
     * @return self
     */
    public function setRooms($rooms)
    {
        if (is_null($rooms)) {
            throw new \InvalidArgumentException('non-nullable rooms cannot be null');
        }
        $this->container['rooms'] = $rooms;

        return $this;
    }

    /**
     * Gets assigned_room
     *
     * @return \OpenAPI\Client\Model\RoomRef|null
     */
    public function getAssignedRoom()
    {
        return $this->container['assigned_room'];
    }

    /**
     * Sets assigned_room
     *
     * @param \OpenAPI\Client\Model\RoomRef|null $assigned_room assigned_room
     *
     * @return self
     */
    public function setAssignedRoom($assigned_room)
    {
        if (is_null($assigned_room)) {
            throw new \InvalidArgumentException('non-nullable assigned_room cannot be null');
        }
        $this->container['assigned_room'] = $assigned_room;

        return $this;
    }

    /**
     * Gets courses
     *
     * @return \OpenAPI\Client\Model\EvaluationCoursesInner[]|null
     */
    public function getCourses()
    {
        return $this->container['courses'];
    }

    /**
     * Sets courses
     *
     * @param \OpenAPI\Client\Model\EvaluationCoursesInner[]|null $courses courses
     *
     * @return self
     */
    public function setCourses($courses)
    {
        if (is_null($courses)) {
            throw new \InvalidArgumentException('non-nullable courses cannot be null');
        }
        $this->container['courses'] = $courses;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


