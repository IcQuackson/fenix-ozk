<?php
/**
 * AboutResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FenixEdu Public API
 *
 * OpenAPI specification derived from the provided FenixEdu API documentation.  **Scope & availability** - Applicable to all FenixEdu installations as of **v1.2.0**. - Availability and access control may vary per institution. Check your local instance.  **Localization** - All endpoints accept an optional `lang` query parameter. If present and supported,   responses are localized; otherwise, the default language is used. - Available languages are returned by `GET /about`.  **Security** - The original text does not describe authentication details. This spec marks endpoints under `/person` as **private** and attaches a generic Bearer token scheme. Replace or extend the security scheme to match your deployment (e.g., OAuth2 Authorization Code).
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AboutResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AboutResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AboutResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'institution_name' => 'string',
        'institution_url' => 'string',
        'rss_feeds' => '\OpenAPI\Client\Model\RssFeed[]',
        'rss' => '\OpenAPI\Client\Model\AboutResponseRss',
        'current_academic_term' => 'string',
        'languages' => 'string[]',
        'language' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'institution_name' => null,
        'institution_url' => null,
        'rss_feeds' => null,
        'rss' => null,
        'current_academic_term' => null,
        'languages' => null,
        'language' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'institution_name' => false,
        'institution_url' => false,
        'rss_feeds' => false,
        'rss' => false,
        'current_academic_term' => false,
        'languages' => false,
        'language' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'institution_name' => 'institutionName',
        'institution_url' => 'institutionUrl',
        'rss_feeds' => 'rssFeeds',
        'rss' => 'rss',
        'current_academic_term' => 'currentAcademicTerm',
        'languages' => 'languages',
        'language' => 'language'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'institution_name' => 'setInstitutionName',
        'institution_url' => 'setInstitutionUrl',
        'rss_feeds' => 'setRssFeeds',
        'rss' => 'setRss',
        'current_academic_term' => 'setCurrentAcademicTerm',
        'languages' => 'setLanguages',
        'language' => 'setLanguage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'institution_name' => 'getInstitutionName',
        'institution_url' => 'getInstitutionUrl',
        'rss_feeds' => 'getRssFeeds',
        'rss' => 'getRss',
        'current_academic_term' => 'getCurrentAcademicTerm',
        'languages' => 'getLanguages',
        'language' => 'getLanguage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('institution_name', $data ?? [], null);
        $this->setIfExists('institution_url', $data ?? [], null);
        $this->setIfExists('rss_feeds', $data ?? [], null);
        $this->setIfExists('rss', $data ?? [], null);
        $this->setIfExists('current_academic_term', $data ?? [], null);
        $this->setIfExists('languages', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets institution_name
     *
     * @return string|null
     */
    public function getInstitutionName()
    {
        return $this->container['institution_name'];
    }

    /**
     * Sets institution_name
     *
     * @param string|null $institution_name institution_name
     *
     * @return self
     */
    public function setInstitutionName($institution_name)
    {
        if (is_null($institution_name)) {
            throw new \InvalidArgumentException('non-nullable institution_name cannot be null');
        }
        $this->container['institution_name'] = $institution_name;

        return $this;
    }

    /**
     * Gets institution_url
     *
     * @return string|null
     */
    public function getInstitutionUrl()
    {
        return $this->container['institution_url'];
    }

    /**
     * Sets institution_url
     *
     * @param string|null $institution_url institution_url
     *
     * @return self
     */
    public function setInstitutionUrl($institution_url)
    {
        if (is_null($institution_url)) {
            throw new \InvalidArgumentException('non-nullable institution_url cannot be null');
        }
        $this->container['institution_url'] = $institution_url;

        return $this;
    }

    /**
     * Gets rss_feeds
     *
     * @return \OpenAPI\Client\Model\RssFeed[]|null
     */
    public function getRssFeeds()
    {
        return $this->container['rss_feeds'];
    }

    /**
     * Sets rss_feeds
     *
     * @param \OpenAPI\Client\Model\RssFeed[]|null $rss_feeds rss_feeds
     *
     * @return self
     */
    public function setRssFeeds($rss_feeds)
    {
        if (is_null($rss_feeds)) {
            throw new \InvalidArgumentException('non-nullable rss_feeds cannot be null');
        }
        $this->container['rss_feeds'] = $rss_feeds;

        return $this;
    }

    /**
     * Gets rss
     *
     * @return \OpenAPI\Client\Model\AboutResponseRss|null
     */
    public function getRss()
    {
        return $this->container['rss'];
    }

    /**
     * Sets rss
     *
     * @param \OpenAPI\Client\Model\AboutResponseRss|null $rss rss
     *
     * @return self
     */
    public function setRss($rss)
    {
        if (is_null($rss)) {
            throw new \InvalidArgumentException('non-nullable rss cannot be null');
        }
        $this->container['rss'] = $rss;

        return $this;
    }

    /**
     * Gets current_academic_term
     *
     * @return string|null
     */
    public function getCurrentAcademicTerm()
    {
        return $this->container['current_academic_term'];
    }

    /**
     * Sets current_academic_term
     *
     * @param string|null $current_academic_term current_academic_term
     *
     * @return self
     */
    public function setCurrentAcademicTerm($current_academic_term)
    {
        if (is_null($current_academic_term)) {
            throw new \InvalidArgumentException('non-nullable current_academic_term cannot be null');
        }
        $this->container['current_academic_term'] = $current_academic_term;

        return $this;
    }

    /**
     * Gets languages
     *
     * @return string[]|null
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param string[]|null $languages languages
     *
     * @return self
     */
    public function setLanguages($languages)
    {
        if (is_null($languages)) {
            throw new \InvalidArgumentException('non-nullable languages cannot be null');
        }
        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        $this->container['language'] = $language;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


