<?php
/**
 * Course
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FenixEdu Public API
 *
 * OpenAPI specification derived from the provided FenixEdu API documentation.  **Scope & availability** - Applicable to all FenixEdu installations as of **v1.2.0**. - Availability and access control may vary per institution. Check your local instance.  **Localization** - All endpoints accept an optional `lang` query parameter. If present and supported,   responses are localized; otherwise, the default language is used. - Available languages are returned by `GET /about`.  **Security** - The original text does not describe authentication details. This spec marks endpoints under `/person` as **private** and attaches a generic Bearer token scheme. Replace or extend the security scheme to match your deployment (e.g., OAuth2 Authorization Code).
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Course Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Course implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Course';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'acronym' => 'string',
        'name' => 'string',
        'academic_term' => 'string',
        'evaluation_method' => 'string',
        'number_of_attending_students' => 'int',
        'announcement_link' => 'string',
        'summary_link' => 'string',
        'url' => 'string',
        'competences' => '\OpenAPI\Client\Model\CourseCompetence[]',
        'teachers' => '\OpenAPI\Client\Model\CourseTeacher[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'acronym' => null,
        'name' => null,
        'academic_term' => null,
        'evaluation_method' => null,
        'number_of_attending_students' => null,
        'announcement_link' => null,
        'summary_link' => null,
        'url' => null,
        'competences' => null,
        'teachers' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'acronym' => false,
        'name' => false,
        'academic_term' => false,
        'evaluation_method' => false,
        'number_of_attending_students' => false,
        'announcement_link' => false,
        'summary_link' => false,
        'url' => false,
        'competences' => false,
        'teachers' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'acronym' => 'acronym',
        'name' => 'name',
        'academic_term' => 'academicTerm',
        'evaluation_method' => 'evaluationMethod',
        'number_of_attending_students' => 'numberOfAttendingStudents',
        'announcement_link' => 'announcementLink',
        'summary_link' => 'summaryLink',
        'url' => 'url',
        'competences' => 'competences',
        'teachers' => 'teachers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'acronym' => 'setAcronym',
        'name' => 'setName',
        'academic_term' => 'setAcademicTerm',
        'evaluation_method' => 'setEvaluationMethod',
        'number_of_attending_students' => 'setNumberOfAttendingStudents',
        'announcement_link' => 'setAnnouncementLink',
        'summary_link' => 'setSummaryLink',
        'url' => 'setUrl',
        'competences' => 'setCompetences',
        'teachers' => 'setTeachers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'acronym' => 'getAcronym',
        'name' => 'getName',
        'academic_term' => 'getAcademicTerm',
        'evaluation_method' => 'getEvaluationMethod',
        'number_of_attending_students' => 'getNumberOfAttendingStudents',
        'announcement_link' => 'getAnnouncementLink',
        'summary_link' => 'getSummaryLink',
        'url' => 'getUrl',
        'competences' => 'getCompetences',
        'teachers' => 'getTeachers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('acronym', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('academic_term', $data ?? [], null);
        $this->setIfExists('evaluation_method', $data ?? [], null);
        $this->setIfExists('number_of_attending_students', $data ?? [], null);
        $this->setIfExists('announcement_link', $data ?? [], null);
        $this->setIfExists('summary_link', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('competences', $data ?? [], null);
        $this->setIfExists('teachers', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets acronym
     *
     * @return string|null
     */
    public function getAcronym()
    {
        return $this->container['acronym'];
    }

    /**
     * Sets acronym
     *
     * @param string|null $acronym acronym
     *
     * @return self
     */
    public function setAcronym($acronym)
    {
        if (is_null($acronym)) {
            throw new \InvalidArgumentException('non-nullable acronym cannot be null');
        }
        $this->container['acronym'] = $acronym;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets academic_term
     *
     * @return string|null
     */
    public function getAcademicTerm()
    {
        return $this->container['academic_term'];
    }

    /**
     * Sets academic_term
     *
     * @param string|null $academic_term academic_term
     *
     * @return self
     */
    public function setAcademicTerm($academic_term)
    {
        if (is_null($academic_term)) {
            throw new \InvalidArgumentException('non-nullable academic_term cannot be null');
        }
        $this->container['academic_term'] = $academic_term;

        return $this;
    }

    /**
     * Gets evaluation_method
     *
     * @return string|null
     */
    public function getEvaluationMethod()
    {
        return $this->container['evaluation_method'];
    }

    /**
     * Sets evaluation_method
     *
     * @param string|null $evaluation_method evaluation_method
     *
     * @return self
     */
    public function setEvaluationMethod($evaluation_method)
    {
        if (is_null($evaluation_method)) {
            throw new \InvalidArgumentException('non-nullable evaluation_method cannot be null');
        }
        $this->container['evaluation_method'] = $evaluation_method;

        return $this;
    }

    /**
     * Gets number_of_attending_students
     *
     * @return int|null
     */
    public function getNumberOfAttendingStudents()
    {
        return $this->container['number_of_attending_students'];
    }

    /**
     * Sets number_of_attending_students
     *
     * @param int|null $number_of_attending_students number_of_attending_students
     *
     * @return self
     */
    public function setNumberOfAttendingStudents($number_of_attending_students)
    {
        if (is_null($number_of_attending_students)) {
            throw new \InvalidArgumentException('non-nullable number_of_attending_students cannot be null');
        }
        $this->container['number_of_attending_students'] = $number_of_attending_students;

        return $this;
    }

    /**
     * Gets announcement_link
     *
     * @return string|null
     */
    public function getAnnouncementLink()
    {
        return $this->container['announcement_link'];
    }

    /**
     * Sets announcement_link
     *
     * @param string|null $announcement_link announcement_link
     *
     * @return self
     */
    public function setAnnouncementLink($announcement_link)
    {
        if (is_null($announcement_link)) {
            throw new \InvalidArgumentException('non-nullable announcement_link cannot be null');
        }
        $this->container['announcement_link'] = $announcement_link;

        return $this;
    }

    /**
     * Gets summary_link
     *
     * @return string|null
     */
    public function getSummaryLink()
    {
        return $this->container['summary_link'];
    }

    /**
     * Sets summary_link
     *
     * @param string|null $summary_link summary_link
     *
     * @return self
     */
    public function setSummaryLink($summary_link)
    {
        if (is_null($summary_link)) {
            throw new \InvalidArgumentException('non-nullable summary_link cannot be null');
        }
        $this->container['summary_link'] = $summary_link;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets competences
     *
     * @return \OpenAPI\Client\Model\CourseCompetence[]|null
     */
    public function getCompetences()
    {
        return $this->container['competences'];
    }

    /**
     * Sets competences
     *
     * @param \OpenAPI\Client\Model\CourseCompetence[]|null $competences competences
     *
     * @return self
     */
    public function setCompetences($competences)
    {
        if (is_null($competences)) {
            throw new \InvalidArgumentException('non-nullable competences cannot be null');
        }
        $this->container['competences'] = $competences;

        return $this;
    }

    /**
     * Gets teachers
     *
     * @return \OpenAPI\Client\Model\CourseTeacher[]|null
     */
    public function getTeachers()
    {
        return $this->container['teachers'];
    }

    /**
     * Sets teachers
     *
     * @param \OpenAPI\Client\Model\CourseTeacher[]|null $teachers teachers
     *
     * @return self
     */
    public function setTeachers($teachers)
    {
        if (is_null($teachers)) {
            throw new \InvalidArgumentException('non-nullable teachers cannot be null');
        }
        $this->container['teachers'] = $teachers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


