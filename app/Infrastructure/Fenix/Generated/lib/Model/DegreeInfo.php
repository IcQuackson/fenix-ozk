<?php
/**
 * DegreeInfo
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FenixEdu Public API
 *
 * OpenAPI specification derived from the provided FenixEdu API documentation.  **Scope & availability** - Applicable to all FenixEdu installations as of **v1.2.0**. - Availability and access control may vary per institution. Check your local instance.  **Localization** - All endpoints accept an optional `lang` query parameter. If present and supported,   responses are localized; otherwise, the default language is used. - Available languages are returned by `GET /about`.  **Security** - The original text does not describe authentication details. This spec marks endpoints under `/person` as **private** and attaches a generic Bearer token scheme. Replace or extend the security scheme to match your deployment (e.g., OAuth2 Authorization Code).
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DegreeInfo Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DegreeInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Degree_info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'description' => 'string',
        'objectives' => 'string',
        'design_for' => 'string',
        'requisites' => 'string',
        'profissional_exits' => 'string',
        'history' => 'string',
        'operation_regime' => 'string',
        'gratuity' => 'string',
        'links' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'description' => null,
        'objectives' => null,
        'design_for' => null,
        'requisites' => null,
        'profissional_exits' => null,
        'history' => null,
        'operation_regime' => null,
        'gratuity' => null,
        'links' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'description' => false,
        'objectives' => false,
        'design_for' => false,
        'requisites' => false,
        'profissional_exits' => false,
        'history' => false,
        'operation_regime' => false,
        'gratuity' => false,
        'links' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'objectives' => 'objectives',
        'design_for' => 'designFor',
        'requisites' => 'requisites',
        'profissional_exits' => 'profissionalExits',
        'history' => 'history',
        'operation_regime' => 'operationRegime',
        'gratuity' => 'gratuity',
        'links' => 'links'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'objectives' => 'setObjectives',
        'design_for' => 'setDesignFor',
        'requisites' => 'setRequisites',
        'profissional_exits' => 'setProfissionalExits',
        'history' => 'setHistory',
        'operation_regime' => 'setOperationRegime',
        'gratuity' => 'setGratuity',
        'links' => 'setLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'objectives' => 'getObjectives',
        'design_for' => 'getDesignFor',
        'requisites' => 'getRequisites',
        'profissional_exits' => 'getProfissionalExits',
        'history' => 'getHistory',
        'operation_regime' => 'getOperationRegime',
        'gratuity' => 'getGratuity',
        'links' => 'getLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('objectives', $data ?? [], null);
        $this->setIfExists('design_for', $data ?? [], null);
        $this->setIfExists('requisites', $data ?? [], null);
        $this->setIfExists('profissional_exits', $data ?? [], null);
        $this->setIfExists('history', $data ?? [], null);
        $this->setIfExists('operation_regime', $data ?? [], null);
        $this->setIfExists('gratuity', $data ?? [], null);
        $this->setIfExists('links', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets objectives
     *
     * @return string|null
     */
    public function getObjectives()
    {
        return $this->container['objectives'];
    }

    /**
     * Sets objectives
     *
     * @param string|null $objectives objectives
     *
     * @return self
     */
    public function setObjectives($objectives)
    {
        if (is_null($objectives)) {
            throw new \InvalidArgumentException('non-nullable objectives cannot be null');
        }
        $this->container['objectives'] = $objectives;

        return $this;
    }

    /**
     * Gets design_for
     *
     * @return string|null
     */
    public function getDesignFor()
    {
        return $this->container['design_for'];
    }

    /**
     * Sets design_for
     *
     * @param string|null $design_for design_for
     *
     * @return self
     */
    public function setDesignFor($design_for)
    {
        if (is_null($design_for)) {
            throw new \InvalidArgumentException('non-nullable design_for cannot be null');
        }
        $this->container['design_for'] = $design_for;

        return $this;
    }

    /**
     * Gets requisites
     *
     * @return string|null
     */
    public function getRequisites()
    {
        return $this->container['requisites'];
    }

    /**
     * Sets requisites
     *
     * @param string|null $requisites requisites
     *
     * @return self
     */
    public function setRequisites($requisites)
    {
        if (is_null($requisites)) {
            throw new \InvalidArgumentException('non-nullable requisites cannot be null');
        }
        $this->container['requisites'] = $requisites;

        return $this;
    }

    /**
     * Gets profissional_exits
     *
     * @return string|null
     */
    public function getProfissionalExits()
    {
        return $this->container['profissional_exits'];
    }

    /**
     * Sets profissional_exits
     *
     * @param string|null $profissional_exits profissional_exits
     *
     * @return self
     */
    public function setProfissionalExits($profissional_exits)
    {
        if (is_null($profissional_exits)) {
            throw new \InvalidArgumentException('non-nullable profissional_exits cannot be null');
        }
        $this->container['profissional_exits'] = $profissional_exits;

        return $this;
    }

    /**
     * Gets history
     *
     * @return string|null
     */
    public function getHistory()
    {
        return $this->container['history'];
    }

    /**
     * Sets history
     *
     * @param string|null $history history
     *
     * @return self
     */
    public function setHistory($history)
    {
        if (is_null($history)) {
            throw new \InvalidArgumentException('non-nullable history cannot be null');
        }
        $this->container['history'] = $history;

        return $this;
    }

    /**
     * Gets operation_regime
     *
     * @return string|null
     */
    public function getOperationRegime()
    {
        return $this->container['operation_regime'];
    }

    /**
     * Sets operation_regime
     *
     * @param string|null $operation_regime operation_regime
     *
     * @return self
     */
    public function setOperationRegime($operation_regime)
    {
        if (is_null($operation_regime)) {
            throw new \InvalidArgumentException('non-nullable operation_regime cannot be null');
        }
        $this->container['operation_regime'] = $operation_regime;

        return $this;
    }

    /**
     * Gets gratuity
     *
     * @return string|null
     */
    public function getGratuity()
    {
        return $this->container['gratuity'];
    }

    /**
     * Sets gratuity
     *
     * @param string|null $gratuity gratuity
     *
     * @return self
     */
    public function setGratuity($gratuity)
    {
        if (is_null($gratuity)) {
            throw new \InvalidArgumentException('non-nullable gratuity cannot be null');
        }
        $this->container['gratuity'] = $gratuity;

        return $this;
    }

    /**
     * Gets links
     *
     * @return string|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param string|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {
        if (is_null($links)) {
            throw new \InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


