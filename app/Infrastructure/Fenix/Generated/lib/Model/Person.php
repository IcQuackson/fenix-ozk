<?php
/**
 * Person
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FenixEdu Public API
 *
 * OpenAPI specification derived from the provided FenixEdu API documentation.  **Scope & availability** - Applicable to all FenixEdu installations as of **v1.2.0**. - Availability and access control may vary per institution. Check your local instance.  **Localization** - All endpoints accept an optional `lang` query parameter. If present and supported,   responses are localized; otherwise, the default language is used. - Available languages are returned by `GET /about`.  **Security** - The original text does not describe authentication details. This spec marks endpoints under `/person` as **private** and attaches a generic Bearer token scheme. Replace or extend the security scheme to match your deployment (e.g., OAuth2 Authorization Code).
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Person Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Person implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Person';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'roles' => '\OpenAPI\Client\Model\PersonRolesInner[]',
        'campus' => 'string',
        'photo' => '\OpenAPI\Client\Model\PersonPhoto',
        'name' => 'string',
        'gender' => 'string',
        'birthday' => 'string',
        'username' => 'string',
        'email' => 'string',
        'personal_emails' => 'string[]',
        'work_emails' => 'string[]',
        'web_addresses' => 'string[]',
        'work_web_addresses' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'roles' => null,
        'campus' => null,
        'photo' => null,
        'name' => null,
        'gender' => null,
        'birthday' => null,
        'username' => null,
        'email' => null,
        'personal_emails' => null,
        'work_emails' => null,
        'web_addresses' => null,
        'work_web_addresses' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'roles' => false,
        'campus' => false,
        'photo' => false,
        'name' => false,
        'gender' => false,
        'birthday' => false,
        'username' => false,
        'email' => false,
        'personal_emails' => false,
        'work_emails' => false,
        'web_addresses' => false,
        'work_web_addresses' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'roles' => 'roles',
        'campus' => 'campus',
        'photo' => 'photo',
        'name' => 'name',
        'gender' => 'gender',
        'birthday' => 'birthday',
        'username' => 'username',
        'email' => 'email',
        'personal_emails' => 'personalEmails',
        'work_emails' => 'workEmails',
        'web_addresses' => 'webAddresses',
        'work_web_addresses' => 'workWebAddresses'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'roles' => 'setRoles',
        'campus' => 'setCampus',
        'photo' => 'setPhoto',
        'name' => 'setName',
        'gender' => 'setGender',
        'birthday' => 'setBirthday',
        'username' => 'setUsername',
        'email' => 'setEmail',
        'personal_emails' => 'setPersonalEmails',
        'work_emails' => 'setWorkEmails',
        'web_addresses' => 'setWebAddresses',
        'work_web_addresses' => 'setWorkWebAddresses'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'roles' => 'getRoles',
        'campus' => 'getCampus',
        'photo' => 'getPhoto',
        'name' => 'getName',
        'gender' => 'getGender',
        'birthday' => 'getBirthday',
        'username' => 'getUsername',
        'email' => 'getEmail',
        'personal_emails' => 'getPersonalEmails',
        'work_emails' => 'getWorkEmails',
        'web_addresses' => 'getWebAddresses',
        'work_web_addresses' => 'getWorkWebAddresses'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('roles', $data ?? [], null);
        $this->setIfExists('campus', $data ?? [], null);
        $this->setIfExists('photo', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('birthday', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('personal_emails', $data ?? [], null);
        $this->setIfExists('work_emails', $data ?? [], null);
        $this->setIfExists('web_addresses', $data ?? [], null);
        $this->setIfExists('work_web_addresses', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets roles
     *
     * @return \OpenAPI\Client\Model\PersonRolesInner[]|null
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param \OpenAPI\Client\Model\PersonRolesInner[]|null $roles roles
     *
     * @return self
     */
    public function setRoles($roles)
    {
        if (is_null($roles)) {
            throw new \InvalidArgumentException('non-nullable roles cannot be null');
        }
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets campus
     *
     * @return string|null
     */
    public function getCampus()
    {
        return $this->container['campus'];
    }

    /**
     * Sets campus
     *
     * @param string|null $campus campus
     *
     * @return self
     */
    public function setCampus($campus)
    {
        if (is_null($campus)) {
            throw new \InvalidArgumentException('non-nullable campus cannot be null');
        }
        $this->container['campus'] = $campus;

        return $this;
    }

    /**
     * Gets photo
     *
     * @return \OpenAPI\Client\Model\PersonPhoto|null
     */
    public function getPhoto()
    {
        return $this->container['photo'];
    }

    /**
     * Sets photo
     *
     * @param \OpenAPI\Client\Model\PersonPhoto|null $photo photo
     *
     * @return self
     */
    public function setPhoto($photo)
    {
        if (is_null($photo)) {
            throw new \InvalidArgumentException('non-nullable photo cannot be null');
        }
        $this->container['photo'] = $photo;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender gender
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets birthday
     *
     * @return string|null
     */
    public function getBirthday()
    {
        return $this->container['birthday'];
    }

    /**
     * Sets birthday
     *
     * @param string|null $birthday birthday
     *
     * @return self
     */
    public function setBirthday($birthday)
    {
        if (is_null($birthday)) {
            throw new \InvalidArgumentException('non-nullable birthday cannot be null');
        }
        $this->container['birthday'] = $birthday;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets personal_emails
     *
     * @return string[]|null
     */
    public function getPersonalEmails()
    {
        return $this->container['personal_emails'];
    }

    /**
     * Sets personal_emails
     *
     * @param string[]|null $personal_emails personal_emails
     *
     * @return self
     */
    public function setPersonalEmails($personal_emails)
    {
        if (is_null($personal_emails)) {
            throw new \InvalidArgumentException('non-nullable personal_emails cannot be null');
        }
        $this->container['personal_emails'] = $personal_emails;

        return $this;
    }

    /**
     * Gets work_emails
     *
     * @return string[]|null
     */
    public function getWorkEmails()
    {
        return $this->container['work_emails'];
    }

    /**
     * Sets work_emails
     *
     * @param string[]|null $work_emails work_emails
     *
     * @return self
     */
    public function setWorkEmails($work_emails)
    {
        if (is_null($work_emails)) {
            throw new \InvalidArgumentException('non-nullable work_emails cannot be null');
        }
        $this->container['work_emails'] = $work_emails;

        return $this;
    }

    /**
     * Gets web_addresses
     *
     * @return string[]|null
     */
    public function getWebAddresses()
    {
        return $this->container['web_addresses'];
    }

    /**
     * Sets web_addresses
     *
     * @param string[]|null $web_addresses web_addresses
     *
     * @return self
     */
    public function setWebAddresses($web_addresses)
    {
        if (is_null($web_addresses)) {
            throw new \InvalidArgumentException('non-nullable web_addresses cannot be null');
        }
        $this->container['web_addresses'] = $web_addresses;

        return $this;
    }

    /**
     * Gets work_web_addresses
     *
     * @return string[]|null
     */
    public function getWorkWebAddresses()
    {
        return $this->container['work_web_addresses'];
    }

    /**
     * Sets work_web_addresses
     *
     * @param string[]|null $work_web_addresses work_web_addresses
     *
     * @return self
     */
    public function setWorkWebAddresses($work_web_addresses)
    {
        if (is_null($work_web_addresses)) {
            throw new \InvalidArgumentException('non-nullable work_web_addresses cannot be null');
        }
        $this->container['work_web_addresses'] = $work_web_addresses;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


