<?php
/**
 * PeoplePrivateApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FenixEdu Public API
 *
 * OpenAPI specification derived from the provided FenixEdu API documentation.  **Scope & availability** - Applicable to all FenixEdu installations as of **v1.2.0**. - Availability and access control may vary per institution. Check your local instance.  **Localization** - All endpoints accept an optional `lang` query parameter. If present and supported,   responses are localized; otherwise, the default language is used. - Available languages are returned by `GET /about`.  **Security** - The original text does not describe authentication details. This spec marks endpoints under `/person` as **private** and attaches a generic Bearer token scheme. Replace or extend the security scheme to match your deployment (e.g., OAuth2 Authorization Code).
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.15.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * PeoplePrivateApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PeoplePrivateApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getPerson' => [
            'application/json',
        ],
        'getPersonCalendarClasses' => [
            'application/json',
        ],
        'getPersonCalendarEvaluations' => [
            'application/json',
        ],
        'getPersonCourses' => [
            'application/json',
        ],
        'getPersonCurriculum' => [
            'application/json',
        ],
        'getPersonEvaluations' => [
            'application/json',
        ],
        'getPersonPayments' => [
            'application/json',
        ],
        'updatePersonEvaluationEnrolment' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getPerson
     *
     * Get the current person&#39;s information.
     *
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPerson'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Person
     */
    public function getPerson($lang = null, string $contentType = self::contentTypes['getPerson'][0])
    {
        list($response) = $this->getPersonWithHttpInfo($lang, $contentType);
        return $response;
    }

    /**
     * Operation getPersonWithHttpInfo
     *
     * Get the current person&#39;s information.
     *
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPerson'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Person, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPersonWithHttpInfo($lang = null, string $contentType = self::contentTypes['getPerson'][0])
    {
        $request = $this->getPersonRequest($lang, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\Person',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\Person',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Person',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getPersonAsync
     *
     * Get the current person&#39;s information.
     *
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPerson'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonAsync($lang = null, string $contentType = self::contentTypes['getPerson'][0])
    {
        return $this->getPersonAsyncWithHttpInfo($lang, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPersonAsyncWithHttpInfo
     *
     * Get the current person&#39;s information.
     *
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPerson'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonAsyncWithHttpInfo($lang = null, string $contentType = self::contentTypes['getPerson'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Person';
        $request = $this->getPersonRequest($lang, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPerson'
     *
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPerson'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPersonRequest($lang = null, string $contentType = self::contentTypes['getPerson'][0])
    {



        $resourcePath = '/person';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lang,
            'lang', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPersonCalendarClasses
     *
     * Get the user&#39;s class calendar.
     *
     * @param  string|null $format Response format for calendar endpoints. (optional, default to 'json')
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonCalendarClasses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetPersonCalendarClasses200Response
     */
    public function getPersonCalendarClasses($format = 'json', $lang = null, string $contentType = self::contentTypes['getPersonCalendarClasses'][0])
    {
        list($response) = $this->getPersonCalendarClassesWithHttpInfo($format, $lang, $contentType);
        return $response;
    }

    /**
     * Operation getPersonCalendarClassesWithHttpInfo
     *
     * Get the user&#39;s class calendar.
     *
     * @param  string|null $format Response format for calendar endpoints. (optional, default to 'json')
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonCalendarClasses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetPersonCalendarClasses200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPersonCalendarClassesWithHttpInfo($format = 'json', $lang = null, string $contentType = self::contentTypes['getPersonCalendarClasses'][0])
    {
        $request = $this->getPersonCalendarClassesRequest($format, $lang, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\GetPersonCalendarClasses200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\GetPersonCalendarClasses200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetPersonCalendarClasses200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getPersonCalendarClassesAsync
     *
     * Get the user&#39;s class calendar.
     *
     * @param  string|null $format Response format for calendar endpoints. (optional, default to 'json')
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonCalendarClasses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonCalendarClassesAsync($format = 'json', $lang = null, string $contentType = self::contentTypes['getPersonCalendarClasses'][0])
    {
        return $this->getPersonCalendarClassesAsyncWithHttpInfo($format, $lang, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPersonCalendarClassesAsyncWithHttpInfo
     *
     * Get the user&#39;s class calendar.
     *
     * @param  string|null $format Response format for calendar endpoints. (optional, default to 'json')
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonCalendarClasses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonCalendarClassesAsyncWithHttpInfo($format = 'json', $lang = null, string $contentType = self::contentTypes['getPersonCalendarClasses'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetPersonCalendarClasses200Response';
        $request = $this->getPersonCalendarClassesRequest($format, $lang, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPersonCalendarClasses'
     *
     * @param  string|null $format Response format for calendar endpoints. (optional, default to 'json')
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonCalendarClasses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPersonCalendarClassesRequest($format = 'json', $lang = null, string $contentType = self::contentTypes['getPersonCalendarClasses'][0])
    {




        $resourcePath = '/person/calendar/classes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lang,
            'lang', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/calendar', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPersonCalendarEvaluations
     *
     * Get the user&#39;s evaluation calendar.
     *
     * @param  string|null $format Response format for calendar endpoints. (optional, default to 'json')
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonCalendarEvaluations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetPersonCalendarEvaluations200Response
     */
    public function getPersonCalendarEvaluations($format = 'json', $lang = null, string $contentType = self::contentTypes['getPersonCalendarEvaluations'][0])
    {
        list($response) = $this->getPersonCalendarEvaluationsWithHttpInfo($format, $lang, $contentType);
        return $response;
    }

    /**
     * Operation getPersonCalendarEvaluationsWithHttpInfo
     *
     * Get the user&#39;s evaluation calendar.
     *
     * @param  string|null $format Response format for calendar endpoints. (optional, default to 'json')
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonCalendarEvaluations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetPersonCalendarEvaluations200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPersonCalendarEvaluationsWithHttpInfo($format = 'json', $lang = null, string $contentType = self::contentTypes['getPersonCalendarEvaluations'][0])
    {
        $request = $this->getPersonCalendarEvaluationsRequest($format, $lang, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\GetPersonCalendarEvaluations200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\GetPersonCalendarEvaluations200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetPersonCalendarEvaluations200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getPersonCalendarEvaluationsAsync
     *
     * Get the user&#39;s evaluation calendar.
     *
     * @param  string|null $format Response format for calendar endpoints. (optional, default to 'json')
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonCalendarEvaluations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonCalendarEvaluationsAsync($format = 'json', $lang = null, string $contentType = self::contentTypes['getPersonCalendarEvaluations'][0])
    {
        return $this->getPersonCalendarEvaluationsAsyncWithHttpInfo($format, $lang, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPersonCalendarEvaluationsAsyncWithHttpInfo
     *
     * Get the user&#39;s evaluation calendar.
     *
     * @param  string|null $format Response format for calendar endpoints. (optional, default to 'json')
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonCalendarEvaluations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonCalendarEvaluationsAsyncWithHttpInfo($format = 'json', $lang = null, string $contentType = self::contentTypes['getPersonCalendarEvaluations'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetPersonCalendarEvaluations200Response';
        $request = $this->getPersonCalendarEvaluationsRequest($format, $lang, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPersonCalendarEvaluations'
     *
     * @param  string|null $format Response format for calendar endpoints. (optional, default to 'json')
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonCalendarEvaluations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPersonCalendarEvaluationsRequest($format = 'json', $lang = null, string $contentType = self::contentTypes['getPersonCalendarEvaluations'][0])
    {




        $resourcePath = '/person/calendar/evaluations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lang,
            'lang', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'text/calendar', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPersonCourses
     *
     * Get the user&#39;s courses.
     *
     * @param  string|null $academic_term One of the terms returned by &#x60;/academicterms&#x60;. (optional)
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PersonCoursesResponse
     */
    public function getPersonCourses($academic_term = null, $lang = null, string $contentType = self::contentTypes['getPersonCourses'][0])
    {
        list($response) = $this->getPersonCoursesWithHttpInfo($academic_term, $lang, $contentType);
        return $response;
    }

    /**
     * Operation getPersonCoursesWithHttpInfo
     *
     * Get the user&#39;s courses.
     *
     * @param  string|null $academic_term One of the terms returned by &#x60;/academicterms&#x60;. (optional)
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonCourses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PersonCoursesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPersonCoursesWithHttpInfo($academic_term = null, $lang = null, string $contentType = self::contentTypes['getPersonCourses'][0])
    {
        $request = $this->getPersonCoursesRequest($academic_term, $lang, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\PersonCoursesResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\PersonCoursesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PersonCoursesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getPersonCoursesAsync
     *
     * Get the user&#39;s courses.
     *
     * @param  string|null $academic_term One of the terms returned by &#x60;/academicterms&#x60;. (optional)
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonCoursesAsync($academic_term = null, $lang = null, string $contentType = self::contentTypes['getPersonCourses'][0])
    {
        return $this->getPersonCoursesAsyncWithHttpInfo($academic_term, $lang, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPersonCoursesAsyncWithHttpInfo
     *
     * Get the user&#39;s courses.
     *
     * @param  string|null $academic_term One of the terms returned by &#x60;/academicterms&#x60;. (optional)
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonCoursesAsyncWithHttpInfo($academic_term = null, $lang = null, string $contentType = self::contentTypes['getPersonCourses'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PersonCoursesResponse';
        $request = $this->getPersonCoursesRequest($academic_term, $lang, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPersonCourses'
     *
     * @param  string|null $academic_term One of the terms returned by &#x60;/academicterms&#x60;. (optional)
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPersonCoursesRequest($academic_term = null, $lang = null, string $contentType = self::contentTypes['getPersonCourses'][0])
    {




        $resourcePath = '/person/courses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $academic_term,
            'academicTerm', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lang,
            'lang', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPersonCurriculum
     *
     * Get the user&#39;s complete curriculum (students only).
     *
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonCurriculum'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PersonCurriculumItem[]
     */
    public function getPersonCurriculum($lang = null, string $contentType = self::contentTypes['getPersonCurriculum'][0])
    {
        list($response) = $this->getPersonCurriculumWithHttpInfo($lang, $contentType);
        return $response;
    }

    /**
     * Operation getPersonCurriculumWithHttpInfo
     *
     * Get the user&#39;s complete curriculum (students only).
     *
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonCurriculum'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PersonCurriculumItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPersonCurriculumWithHttpInfo($lang = null, string $contentType = self::contentTypes['getPersonCurriculum'][0])
    {
        $request = $this->getPersonCurriculumRequest($lang, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\PersonCurriculumItem[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\PersonCurriculumItem[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PersonCurriculumItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getPersonCurriculumAsync
     *
     * Get the user&#39;s complete curriculum (students only).
     *
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonCurriculum'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonCurriculumAsync($lang = null, string $contentType = self::contentTypes['getPersonCurriculum'][0])
    {
        return $this->getPersonCurriculumAsyncWithHttpInfo($lang, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPersonCurriculumAsyncWithHttpInfo
     *
     * Get the user&#39;s complete curriculum (students only).
     *
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonCurriculum'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonCurriculumAsyncWithHttpInfo($lang = null, string $contentType = self::contentTypes['getPersonCurriculum'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PersonCurriculumItem[]';
        $request = $this->getPersonCurriculumRequest($lang, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPersonCurriculum'
     *
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonCurriculum'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPersonCurriculumRequest($lang = null, string $contentType = self::contentTypes['getPersonCurriculum'][0])
    {



        $resourcePath = '/person/curriculum';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lang,
            'lang', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPersonEvaluations
     *
     * Get the user&#39;s written evaluations.
     *
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonEvaluations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Evaluation[]
     */
    public function getPersonEvaluations($lang = null, string $contentType = self::contentTypes['getPersonEvaluations'][0])
    {
        list($response) = $this->getPersonEvaluationsWithHttpInfo($lang, $contentType);
        return $response;
    }

    /**
     * Operation getPersonEvaluationsWithHttpInfo
     *
     * Get the user&#39;s written evaluations.
     *
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonEvaluations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Evaluation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPersonEvaluationsWithHttpInfo($lang = null, string $contentType = self::contentTypes['getPersonEvaluations'][0])
    {
        $request = $this->getPersonEvaluationsRequest($lang, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\Evaluation[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\Evaluation[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Evaluation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getPersonEvaluationsAsync
     *
     * Get the user&#39;s written evaluations.
     *
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonEvaluations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonEvaluationsAsync($lang = null, string $contentType = self::contentTypes['getPersonEvaluations'][0])
    {
        return $this->getPersonEvaluationsAsyncWithHttpInfo($lang, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPersonEvaluationsAsyncWithHttpInfo
     *
     * Get the user&#39;s written evaluations.
     *
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonEvaluations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonEvaluationsAsyncWithHttpInfo($lang = null, string $contentType = self::contentTypes['getPersonEvaluations'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Evaluation[]';
        $request = $this->getPersonEvaluationsRequest($lang, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPersonEvaluations'
     *
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonEvaluations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPersonEvaluationsRequest($lang = null, string $contentType = self::contentTypes['getPersonEvaluations'][0])
    {



        $resourcePath = '/person/evaluations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lang,
            'lang', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPersonPayments
     *
     * Get the user&#39;s payments information.
     *
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonPayments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PaymentsResponse
     */
    public function getPersonPayments($lang = null, string $contentType = self::contentTypes['getPersonPayments'][0])
    {
        list($response) = $this->getPersonPaymentsWithHttpInfo($lang, $contentType);
        return $response;
    }

    /**
     * Operation getPersonPaymentsWithHttpInfo
     *
     * Get the user&#39;s payments information.
     *
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonPayments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PaymentsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPersonPaymentsWithHttpInfo($lang = null, string $contentType = self::contentTypes['getPersonPayments'][0])
    {
        $request = $this->getPersonPaymentsRequest($lang, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\PaymentsResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\PaymentsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PaymentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getPersonPaymentsAsync
     *
     * Get the user&#39;s payments information.
     *
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonPaymentsAsync($lang = null, string $contentType = self::contentTypes['getPersonPayments'][0])
    {
        return $this->getPersonPaymentsAsyncWithHttpInfo($lang, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPersonPaymentsAsyncWithHttpInfo
     *
     * Get the user&#39;s payments information.
     *
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPersonPaymentsAsyncWithHttpInfo($lang = null, string $contentType = self::contentTypes['getPersonPayments'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PaymentsResponse';
        $request = $this->getPersonPaymentsRequest($lang, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPersonPayments'
     *
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPersonPayments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPersonPaymentsRequest($lang = null, string $contentType = self::contentTypes['getPersonPayments'][0])
    {



        $resourcePath = '/person/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lang,
            'lang', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePersonEvaluationEnrolment
     *
     * Enrol or disenrol from a written evaluation by ID.
     *
     * @param  string $id id (required)
     * @param  string $enrol Enrol or disenrol from a written evaluation. (required)
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePersonEvaluationEnrolment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Evaluation[]
     */
    public function updatePersonEvaluationEnrolment($id, $enrol, $lang = null, string $contentType = self::contentTypes['updatePersonEvaluationEnrolment'][0])
    {
        list($response) = $this->updatePersonEvaluationEnrolmentWithHttpInfo($id, $enrol, $lang, $contentType);
        return $response;
    }

    /**
     * Operation updatePersonEvaluationEnrolmentWithHttpInfo
     *
     * Enrol or disenrol from a written evaluation by ID.
     *
     * @param  string $id (required)
     * @param  string $enrol Enrol or disenrol from a written evaluation. (required)
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePersonEvaluationEnrolment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Evaluation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePersonEvaluationEnrolmentWithHttpInfo($id, $enrol, $lang = null, string $contentType = self::contentTypes['updatePersonEvaluationEnrolment'][0])
    {
        $request = $this->updatePersonEvaluationEnrolmentRequest($id, $enrol, $lang, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\Evaluation[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\Evaluation[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Evaluation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updatePersonEvaluationEnrolmentAsync
     *
     * Enrol or disenrol from a written evaluation by ID.
     *
     * @param  string $id (required)
     * @param  string $enrol Enrol or disenrol from a written evaluation. (required)
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePersonEvaluationEnrolment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePersonEvaluationEnrolmentAsync($id, $enrol, $lang = null, string $contentType = self::contentTypes['updatePersonEvaluationEnrolment'][0])
    {
        return $this->updatePersonEvaluationEnrolmentAsyncWithHttpInfo($id, $enrol, $lang, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePersonEvaluationEnrolmentAsyncWithHttpInfo
     *
     * Enrol or disenrol from a written evaluation by ID.
     *
     * @param  string $id (required)
     * @param  string $enrol Enrol or disenrol from a written evaluation. (required)
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePersonEvaluationEnrolment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePersonEvaluationEnrolmentAsyncWithHttpInfo($id, $enrol, $lang = null, string $contentType = self::contentTypes['updatePersonEvaluationEnrolment'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Evaluation[]';
        $request = $this->updatePersonEvaluationEnrolmentRequest($id, $enrol, $lang, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePersonEvaluationEnrolment'
     *
     * @param  string $id (required)
     * @param  string $enrol Enrol or disenrol from a written evaluation. (required)
     * @param  string|null $lang BCP 47 language tag. If supported, localizes the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePersonEvaluationEnrolment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePersonEvaluationEnrolmentRequest($id, $enrol, $lang = null, string $contentType = self::contentTypes['updatePersonEvaluationEnrolment'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updatePersonEvaluationEnrolment'
            );
        }

        // verify the required parameter 'enrol' is set
        if ($enrol === null || (is_array($enrol) && count($enrol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enrol when calling updatePersonEvaluationEnrolment'
            );
        }



        $resourcePath = '/person/evaluations/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enrol,
            'enrol', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lang,
            'lang', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
